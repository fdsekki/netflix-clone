{"version":3,"sources":["axios.js","MoviesRow.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","MoviesRow","props","React","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","fetchUrl","request","data","results","fetchData","className","title","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","isLargeRow","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07f3fd06.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n// base url to make requests to the movies API\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\n/*  Example:\r\n    instance.get('/foo-bar');\r\n    will be\r\n    https://api.themoviedb.org/3/foo-bar\r\n\r\n*/\r\n\r\nexport default instance;\r\n\r\n\r\n/*\r\n\r\n  you can have only one export default in a file, but multiple exports\r\n  without default, the we have to distructure the variable and use it as it is,\r\n  without changing the name of the variable in the other file\r\n\r\n*/\r\n","import React from 'react';\r\nimport axios from './axios'; /* when we have a default export, we can rename variables, Ex: from instance to axios */\r\nimport \"./MoviesRow.css\";\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction MoviesRow(props) {\r\n  const [movies, setMovies] = React.useState([]);\r\n  const [trailerUrl, setTrailerUrl] = React.useState(\"\");\r\n\r\n  // A snippet of code which runs based on a specific condition/variable\r\n  React.useEffect(() => {\r\n    // if [] are blank, run once when the row loads, and dont run again\r\n    async function fetchData() {\r\n      const request = await axios.get(props.fetchUrl);\r\n      // console.log(request); /* request.data.results */\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n    /*\r\n      whenever you use anything inside of a useEffect\r\n      if there is any variable that is being pulled from outside,\r\n      you have to include it inside of [], because it is dependent\r\n      on that variable\r\n    */\r\n  }, [props.fetchUrl]);\r\n\r\n  // console.log(movies)\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.name || \"\")\r\n        .then((url) => {\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get('v'));\r\n        })\r\n        .catch(error => console.log(error));\r\n    }\r\n  }\r\n\r\n  return(\r\n    <div className=\"moviesrow\">\r\n      {/* title */}\r\n      <h2>{props.title}</h2>\r\n\r\n      {/* container -> posters */}\r\n      <div className=\"moviesrow__posters\">\r\n        {/* several row__poster(s) */}\r\n        {movies.map(movie => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            className={`moviesrow__poster ${props.isLargeRow && \"moviesrow__posterLarge\"}`}\r\n            src={`${base_url}${props.isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MoviesRow;\r\n","const API_KEY = \"0a16e2001aa1baf24eeb7eff144c9699\";\r\n\r\n// endpoints from API request\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n","import React, { useState, useEffect } from 'react';\r\nimport requests from './requests';\r\nimport axios from './axios';\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(request.data.results[\r\n        Math.floor(Math.random() * request.data.results.length - 1)\r\n      ]); /* grab a random movie from the array */\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  // console.log(movie);\r\n\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n\r\n  return(\r\n    <header className=\"banner\" style={{\r\n      backgroundSize: \"cover\",\r\n      backgroundImage: `url(\r\n        \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n      )`,\r\n      backgroundPosition: \"center center\",\r\n    }}> {/* background image */}\r\n\r\n      <div className=\"banner__contents\">\r\n\r\n        {/* title */}\r\n        <h1 className=\"banner__title\">\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n\r\n        {/* div -> 2 buttons play and mylist */}\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button\">Play</button>\r\n          <button className=\"banner__button\">My List</button>\r\n        </div>\r\n\r\n        {/* description */}\r\n        <h1 className=\"banner__description\">\r\n          {truncate(movie?.overview)}\r\n        </h1>\r\n      </div>\r\n      <div className=\"banner__fadeBottom\" />\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from 'react';\r\nimport \"./Nav.css\"\r\n\r\nfunction Nav() {\r\n  const [show, handleShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        handleShow(true);\r\n      } else handleShow(false);\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${show && \"nav__black\"}`}>\r\n      <img\r\n        className=\"nav__logo\"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\r\n        alt=\"Netflix Logo\"\r\n      />\r\n\r\n      <img\r\n        className=\"nav__avatar\"\r\n        src=\"https://occ-0-4427-3466.1.nflxso.net/dnm/api/v6/K6hjPJd6cR6FpVELC5Pd6ovHRSk/AAAABbme8JMz4rEKFJhtzpOKWFJ_6qX-0y5wwWyYvBhWS0VKFLa289dZ5zvRBggmFVWVPL2AAYE8xevD4jjLZjWumNo.png?r=a41\"\r\n        alt=\"Netflix Logo\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\nimport './App.css';\nimport MoviesRow from './MoviesRow';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <>\n      {/* Navbar */}\n      <Nav />\n      \n      {/* Banner */}\n      <Banner />\n\n      {/* Movies */}\n      <div className=\"app\">\n        <MoviesRow title=\"Netflix Originals\" isLargeRow fetchUrl={requests.fetchNetflixOriginals} />\n        <MoviesRow title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n        <MoviesRow title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n        <MoviesRow title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n        <MoviesRow title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n        <MoviesRow title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n        <MoviesRow title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n        <MoviesRow title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}